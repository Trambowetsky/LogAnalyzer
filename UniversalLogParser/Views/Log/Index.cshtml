@model IEnumerable<UniversalLogParser.Models.LogEntry>
@{
    var logFileId = Model.FirstOrDefault()?.LogFileId ?? 0;
}
<h2 class="mb-3">Log entries</h2>

<div class="d-flex justify-content-between align-items-center mb-3">
    <div class="d-flex align-items-center gap-2">
        <label class="fw-semibold me-2">Filter by level:</label>
        <select id="levelFilter" class="form-select form-select-sm w-auto">
            <option value="All" selected>All</option>
            <option value="inf">Info</option>
            <option value="wrn">Warning</option>
            <option value="err">Error</option>
            <option value="dbg">Debug</option>
        </select>

        <label class="fw-semibold ms-4 me-2">Sort by date:</label>
        <select id="dateSort" class="form-select form-select-sm w-auto">
            <option value="desc">Newest first</option>
            <option value="asc" selected>Oldest first</option>
        </select>
        <a asp-controller="Log" asp-action="Stats" asp-route-id="@logFileId" class="btn btn-outline-secondary btn-sm">
            Statistics
        </a>
        <button id="exportExcelBtn" class="btn btn-outline-secondary btn-sm">
            Export to Excel
        </button>
    </div>

    <a asp-controller="LogFiles" asp-action="Index" class="btn btn-outline-secondary btn-sm">
        ← Back to files
    </a>
</div>

<table class="table table-hover align-middle" id="logTable">
    <thead class="table-dark">
    <tr>
        <th></th>
        <th>Date</th>
        <th>Level</th>
        <th>Message</th>
    </tr>
    </thead>
    <tbody>
        @foreach (var log in Model.OrderByDescending(x => x.Date))
        {
            
            <tr data-level="@log.Level">
                <td><input type="checkbox" class="row-checkbox" data-id="@log.Id" /></td>
                <td>@log.Date.ToString("yyyy-MM-dd HH:mm:ss")</td>
                <td>
                    @switch (log.Level?.ToLower())
                    {
                        case "err":
                            <span class="badge bg-danger text-uppercase">Error</span>
                            break;
                        case "wrn":
                            <span class="badge bg-warning text-dark text-uppercase">Warning</span>
                            break;
                        case "dbg":
                            <span class="badge bg-secondary text-uppercase">Debug</span>
                            break;
                        default:
                            <span class="badge bg-info text-uppercase">Info</span>
                            break;
                    }
                </td>
                <td>@log.Message</td>
            </tr>
        }
    </tbody>
</table>
<nav aria-label="Pagination">
    <ul id="pagination" class="pagination justify-content-center mt-3"></ul>
</nav>

<script>
    const levelFilter = document.getElementById('levelFilter');
    const dateSort = document.getElementById('dateSort');
    const tableBody = document.querySelector('#logTable tbody');
    const pagination = document.getElementById('pagination');
    const allRows = Array.from(tableBody.querySelectorAll('tr'));
    const rowsPerPage = 20;
    let currentPage = 1;

    const selectedIds = new Set();

    function filterSortPaginate() {
        const level = levelFilter.value.toLowerCase();
        const sortOrder = dateSort.value;

        let rows = [...allRows];


        if (level !== 'all') {
            rows = rows.filter(r => r.dataset.level.toLowerCase() === level);
        }


        rows.sort((a, b) => {
            const dateA = new Date(a.children[1].innerText);
            const dateB = new Date(b.children[1].innerText);
            return sortOrder === 'asc' ? dateA - dateB : dateB - dateA;
        });


        const totalPages = Math.ceil(rows.length / rowsPerPage);
        if (currentPage > totalPages) currentPage = totalPages || 1;

        const start = (currentPage - 1) * rowsPerPage;
        const end = start + rowsPerPage;
        const paginatedRows = rows.slice(start, end);
        
        tableBody.innerHTML = '';
        paginatedRows.forEach(r => {
            const checkbox = r.querySelector('.row-checkbox');
            checkbox.checked = selectedIds.has(parseInt(checkbox.dataset.id));
            tableBody.appendChild(r);
        });

        renderPagination(totalPages);
    }
    
    function renderPagination(totalPages) {
        pagination.innerHTML = '';

        if (totalPages <= 1) return;

        for (let i = 1; i <= totalPages; i++) {
            const li = document.createElement('li');
            li.classList.add('page-item');
            if (i === currentPage) li.classList.add('active');

            const a = document.createElement('a');
            a.classList.add('page-link');
            a.textContent = i;
            a.href = '#';
            a.addEventListener('click', (e) => {
                e.preventDefault();
                currentPage = i;
                filterSortPaginate();
            });

            li.appendChild(a);
            pagination.appendChild(li);
        }
    }
    
    levelFilter.addEventListener('change', () => {
        currentPage = 1;
        filterSortPaginate();
    });
    dateSort.addEventListener('change', () => {
        currentPage = 1;
        filterSortPaginate();
    });
    
    document.addEventListener('change', (e) => {
        if (e.target.classList.contains('row-checkbox')) {
            const id = parseInt(e.target.dataset.id);
            if (e.target.checked) selectedIds.add(id);
            else selectedIds.delete(id);
        }
    });
    
    document.getElementById("exportExcelBtn").addEventListener("click", () => {
        const idsArray = Array.from(selectedIds);
        const fileId = @logFileId;

        fetch(`/Log/ExportToExcel?fileId=${fileId}`, {
            method: "POST",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify(idsArray)
        })
            .then(res => res.blob())
            .then(blob => {
                const url = window.URL.createObjectURL(blob);
                const a = document.createElement("a");
                a.href = url;
                a.download = "logs_export.xlsx";
                a.click();
                URL.revokeObjectURL(url);
            });
    });

    // Инициализация
    filterSortPaginate();
</script>
