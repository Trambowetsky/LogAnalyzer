@{
ViewData["Title"] = "Statistics for " + ViewBag.FileName;
}

<h2>@ViewData["Title"]</h2>

<a asp-controller="Log" asp-action="Index" asp-route-id="@ViewBag.FileId" class="btn btn-outline-secondary btn-sm">
    ‚Üê Back to entries
</a>
<div style="display: flex; justify-content: center; align-items: flex-start; gap: 40px; margin-top: 40px;">
    <div style="width: 600px; height: 300px;">
        <canvas id="logChart"></canvas>
    </div>
    <div style="width: 600px; height: 300px;">
        <canvas id="logPeriodChart"></canvas>
    </div>
</div>
<div style="display: flex; justify-content: center; align-items: flex-start; gap: 40px; margin-top: 40px;">
    <div class="chart-box" style="width: 300px; height: 300px; margin: auto;">
        <canvas id="logCategoryChart"></canvas>
    </div>
    <div class="chart-box" style="width: 600px; height: 300px; margin: auto;">
        <canvas id="logHeatmap"></canvas>
    </div>
</div>


<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
<script src="https://cdn.jsdelivr.net/npm/chartjs-chart-matrix/dist/chartjs-chart-matrix.min.js"></script>
<script>
    const fileId = @ViewBag.FileId;

    fetch(`/Log/GetLevelStats?fileId=${fileId}`)
        .then(res => res.json())
        .then(data => {
            const ctx = document.getElementById('logChart').getContext('2d');
            new Chart(ctx, {
                type: 'bar',
                data: {
                    labels: data.map(x => x.level),
                    datasets: [{
                        label: 'Count by level',
                        data: data.map(x => x.count),
                        backgroundColor: ['#D3D3D3', '#ff6384', '#36a2eb', "#ffce56"]
                    }]
                },
                options: {
                    scales: { y: { beginAtZero: true } }
                }
            });
        });

    fetch(`/Log/GetPeriodStats?fileId=${fileId}`)
        .then(res => res.json())
        .then(data => {
            const ctx = document.getElementById('logPeriodChart').getContext('2d');
            const labels = data.map(x => x.time);
            const counts = data.map(x => x.count);
            new Chart(ctx, {
                type: 'line',
                data: {
                    labels: labels,
                    datasets: [{
                        label: 'Log activity over time',
                        data: counts,
                        borderColor: '#36A2EB',
                        fill: false,
                        tension: 0.2
                    }]
                }
            });
        });
    fetch(`/Log/GetCategoryStats?fileId=${fileId}`)
        .then(res => res.json())
        .then(data => {
            const ctx = document.getElementById('logCategoryChart').getContext('2d');
            const labels = Object.keys(data);
            const counts = Object.values(data);

            new Chart(ctx, {
                type: 'doughnut',
                data: {
                    labels: labels,
                    datasets: [{
                        label: 'Message Type Distribution',
                        data: counts,
                        backgroundColor: [
                            '#36A2EB', // Database
                            '#FFCE56', // Network
                            '#FF6384', // UI
                            '#4BC0C0', // File
                            '#AAAAAA'  // Other
                        ]
                    }]
                },
                options: {
                    plugins: {
                        legend: { display: false },
                        title: {
                            display: true,
                            text: 'Message type ratio',
                            color: '#fff'
                        }
                    }
                }
            });
        });
    fetch(`/Log/GetHeatmapData?fileId=${fileId}`)
        .then(res => res.json())
        .then(data => {
            const ctx = document.getElementById('logHeatmap').getContext('2d');

            const hours = [...new Set(data.map(d => d.x))];
            const levels = [...new Set(data.map(d => d.y))];

            new Chart(ctx, {
                type: 'matrix',
                data: {
                    datasets: [{
                        label: 'Log Heatmap',
                        data: data,
                        backgroundColor: c => {
                            const value = c.raw.v;
                            const alpha = Math.min(0.8, 0.2 + value / 10);
                            return `rgba(75, 192, 192, ${alpha})`;
                        },
                        width: ({chart}) => (chart.width / hours.length) - 45,
                        height: ({chart}) => (chart.height / levels.length) - 45,
                    }]
                },
                options: {
                    scales: {
                        x: {
                            type: 'category',
                            labels: hours,
                            title: { display: true, text: 'Hours' },
                            grid: { display: false }
                        },
                        y: {
                            type: 'category',
                            labels: levels,
                            title: { display: true, text: 'Log Levels' },
                            grid: { display: false }
                        }
                    },
                    plugins: {
                        legend: { display: false },
                        title: {
                            display: true,
                            text: 'Log activity heatmap',
                            color: '#fff',
                            font: { size: 12, weight: 'bold' }
                        },
                        tooltip: {
                            callbacks: {
                                label: ctx => `Count: ${ctx.raw.v}`
                            }
                        }
                    }
                }
            });
        });
</script>